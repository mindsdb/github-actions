# Builds a docker image, then tags it with the github sha and pushes it to our Amazon ECR registry

inputs:
  module-name:
    description: "Name of the module to build. Used as the default image name and src dir unless 'image-name' or 'src-path' are used."
    required: true
  build-for-environment:
    description: "The backend environment we are building for (API calls are pointed to).  This should be one of (development, staging, production)."
    required: true
  extra-build-args:
    description: "Extra args passed to 'docker build'."
    required: false
  src-path:
    description: "What folder to be (generally to find the Dockerfile in) default is root of repo"
    required: false
  image-ref:
    description: "The version number or sha used in creating image tag"
    required: false


runs:
  using: 'composite'
  steps:
    - uses: FranzDiebold/github-env-vars-action@v2
    # https://github.com/aws-actions/amazon-ecr-login
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - shell: bash
      run: |
        # Env var parsing

        INPUT_SRC_PATH=${{ inputs.src-path }}
        SRC_PATH=${INPUT_SRC_PATH:-"./"}
        INPUT_IMAGE_REF=${{ inputs.image-ref }}
        IMAGE_REF=${INPUT_IMAGE_REF:-$CI_SHA}
        IMAGE_NAME=${{ inputs.module-name }}
        REPO_IMAGE=${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME
        DOCKER_BUILDKIT=1
        ENVIRONMENT=${{ inputs.build-for-environment }}
        BRANCH_NAME=${{env.ENV_NAME}}
        IMAGE_TAG=$ENVIRONMENT-$IMAGE_REF

        # Create repo if needed
        aws ecr create-repository --repository-name $IMAGE_NAME && \
        aws ecr set-repository-policy --repository-name $IMAGE_NAME --policy-text "$(cat ${{ github.action_path }}/shared-ecr-policy.json)" || \
        true # Just let this fail if the repo already exists

        docker buildx create --name=remote-buildkit-agent --driver=remote --use tcp://remote-buildkit-agent.infrastructure.svc.cluster.local:80 || true # Create the builder (might already exist)

        cd $SRC_PATH
        BUILD_ARGS="--build-arg BUILD_FOR_ENVIRONMENT=$ENVIRONMENT --build-arg IMAGE_TAG=$IMAGE_TAG"

        # Finally, build our runner container
        docker buildx build ${{ inputs.extra-build-args }} $BUILD_ARGS -t $REPO_IMAGE:$IMAGE_TAG -t $REPO_IMAGE:latest --push .
